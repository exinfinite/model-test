<?php
/**
 * Product
 *
 * PHP version 8.1
 *
 * @package  Lintrading
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 產品管理 API
 *
 * 電子商務系統中的產品管理 API。
 *
 * The version of the OpenAPI document: 1.0.0
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.8.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Lintrading\Model\Product;

use ArrayAccess;
use JsonSerializable;
use InvalidArgumentException;
use ReturnTypeWillChange;
use Lintrading\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @package  Lintrading
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements ArrayAccess<string, mixed>
 */
class Product implements ModelInterface, ArrayAccess, JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var array<string, string>
      */
    protected static array $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'price' => '\Lintrading\Model\Product\Price',
        'inventory' => '\Lintrading\Model\Product\Inventory',
        'storeId' => 'int',
        'brandId' => 'int',
        'productCategoryIds' => 'int[]',
        'tagIds' => 'int[]',
        'images' => 'string[]',
        'status' => 'string',
        'isShow' => 'string',
        'archived' => 'string',
        'createdAt' => '\DateTime',
        'updatedAt' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'id' => null,
        'name' => null,
        'description' => null,
        'price' => null,
        'inventory' => null,
        'storeId' => null,
        'brandId' => null,
        'productCategoryIds' => null,
        'tagIds' => null,
        'images' => null,
        'status' => null,
        'isShow' => null,
        'archived' => null,
        'createdAt' => 'date-time',
        'updatedAt' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var array<string, bool>
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'description' => false,
        'price' => false,
        'inventory' => false,
        'storeId' => false,
        'brandId' => false,
        'productCategoryIds' => false,
        'tagIds' => false,
        'images' => false,
        'status' => false,
        'isShow' => false,
        'archived' => false,
        'createdAt' => false,
        'updatedAt' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var array<string, bool>
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPITypes(): array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array<string, string>
     */
    public static function openAPIFormats(): array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array<string, bool>
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return array<string, bool>
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param array<string, bool> $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var array<string, string>
     */
    protected static array $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'description' => 'description',
        'price' => 'price',
        'inventory' => 'inventory',
        'storeId' => 'storeId',
        'brandId' => 'brandId',
        'productCategoryIds' => 'productCategoryIds',
        'tagIds' => 'tagIds',
        'images' => 'images',
        'status' => 'status',
        'isShow' => 'isShow',
        'archived' => 'archived',
        'createdAt' => 'createdAt',
        'updatedAt' => 'updatedAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var array<string, string>
     */
    protected static array $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'price' => 'setPrice',
        'inventory' => 'setInventory',
        'storeId' => 'setStoreId',
        'brandId' => 'setBrandId',
        'productCategoryIds' => 'setProductCategoryIds',
        'tagIds' => 'setTagIds',
        'images' => 'setImages',
        'status' => 'setStatus',
        'isShow' => 'setIsShow',
        'archived' => 'setArchived',
        'createdAt' => 'setCreatedAt',
        'updatedAt' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var array<string, string>
     */
    protected static array $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'price' => 'getPrice',
        'inventory' => 'getInventory',
        'storeId' => 'getStoreId',
        'brandId' => 'getBrandId',
        'productCategoryIds' => 'getProductCategoryIds',
        'tagIds' => 'getTagIds',
        'images' => 'getImages',
        'status' => 'getStatus',
        'isShow' => 'getIsShow',
        'archived' => 'getArchived',
        'createdAt' => 'getCreatedAt',
        'updatedAt' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array<string, string>
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array<string, string>
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array<string, string>
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$openAPIModelName;
    }

    public const STATUS_ACTIVE = 'active';
    public const STATUS_INACTIVE = 'inactive';
    public const IS_SHOW_Y = 'Y';
    public const IS_SHOW_N = 'N';
    public const ARCHIVED_Y = 'Y';
    public const ARCHIVED_N = 'N';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_ACTIVE,
            self::STATUS_INACTIVE,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsShowAllowableValues()
    {
        return [
            self::IS_SHOW_Y,
            self::IS_SHOW_N,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getArchivedAllowableValues()
    {
        return [
            self::ARCHIVED_Y,
            self::ARCHIVED_N,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var array
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param array $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('inventory', $data ?? [], null);
        $this->setIfExists('storeId', $data ?? [], null);
        $this->setIfExists('brandId', $data ?? [], null);
        $this->setIfExists('productCategoryIds', $data ?? [], null);
        $this->setIfExists('tagIds', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('isShow', $data ?? [], null);
        $this->setIfExists('archived', $data ?? [], null);
        $this->setIfExists('createdAt', $data ?? [], null);
        $this->setIfExists('updatedAt', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, mixed $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return string[] invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'status', must be one of '%s'",
                $this->container['status'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsShowAllowableValues();
        if (!is_null($this->container['isShow']) && !in_array($this->container['isShow'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'isShow', must be one of '%s'",
                $this->container['isShow'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getArchivedAllowableValues();
        if (!is_null($this->container['archived']) && !in_array($this->container['archived'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'archived', must be one of '%s'",
                $this->container['archived'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId(): ?int
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 產品ID
     *
     * @return $this
     */
    public function setId(?int $id): static
    {
        if (is_null($id)) {
            throw new InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName(): ?string
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 產品名稱
     *
     * @return $this
     */
    public function setName(?string $name): static
    {
        if (is_null($name)) {
            throw new InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription(): ?string
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 產品描述
     *
     * @return $this
     */
    public function setDescription(?string $description): static
    {
        if (is_null($description)) {
            throw new InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Lintrading\Model\Product\Price|null
     */
    public function getPrice(): ?\Lintrading\Model\Product\Price
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Lintrading\Model\Product\Price|null $price price
     *
     * @return $this
     */
    public function setPrice(?\Lintrading\Model\Product\Price $price): static
    {
        if (is_null($price)) {
            throw new InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets inventory
     *
     * @return \Lintrading\Model\Product\Inventory|null
     */
    public function getInventory(): ?\Lintrading\Model\Product\Inventory
    {
        return $this->container['inventory'];
    }

    /**
     * Sets inventory
     *
     * @param \Lintrading\Model\Product\Inventory|null $inventory inventory
     *
     * @return $this
     */
    public function setInventory(?\Lintrading\Model\Product\Inventory $inventory): static
    {
        if (is_null($inventory)) {
            throw new InvalidArgumentException('non-nullable inventory cannot be null');
        }
        $this->container['inventory'] = $inventory;

        return $this;
    }

    /**
     * Gets storeId
     *
     * @return int|null
     */
    public function getStoreId(): ?int
    {
        return $this->container['storeId'];
    }

    /**
     * Sets storeId
     *
     * @param int|null $storeId 店鋪ID
     *
     * @return $this
     */
    public function setStoreId(?int $storeId): static
    {
        if (is_null($storeId)) {
            throw new InvalidArgumentException('non-nullable storeId cannot be null');
        }
        $this->container['storeId'] = $storeId;

        return $this;
    }

    /**
     * Gets brandId
     *
     * @return int|null
     */
    public function getBrandId(): ?int
    {
        return $this->container['brandId'];
    }

    /**
     * Sets brandId
     *
     * @param int|null $brandId 品牌ID
     *
     * @return $this
     */
    public function setBrandId(?int $brandId): static
    {
        if (is_null($brandId)) {
            throw new InvalidArgumentException('non-nullable brandId cannot be null');
        }
        $this->container['brandId'] = $brandId;

        return $this;
    }

    /**
     * Gets productCategoryIds
     *
     * @return int[]|null
     */
    public function getProductCategoryIds(): ?array
    {
        return $this->container['productCategoryIds'];
    }

    /**
     * Sets productCategoryIds
     *
     * @param int[]|null $productCategoryIds 產品分類ID數組
     *
     * @return $this
     */
    public function setProductCategoryIds(?array $productCategoryIds): static
    {
        if (is_null($productCategoryIds)) {
            throw new InvalidArgumentException('non-nullable productCategoryIds cannot be null');
        }
        $this->container['productCategoryIds'] = $productCategoryIds;

        return $this;
    }

    /**
     * Gets tagIds
     *
     * @return int[]|null
     */
    public function getTagIds(): ?array
    {
        return $this->container['tagIds'];
    }

    /**
     * Sets tagIds
     *
     * @param int[]|null $tagIds 產品標籤ID數組
     *
     * @return $this
     */
    public function setTagIds(?array $tagIds): static
    {
        if (is_null($tagIds)) {
            throw new InvalidArgumentException('non-nullable tagIds cannot be null');
        }
        $this->container['tagIds'] = $tagIds;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]|null
     */
    public function getImages(): ?array
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[]|null $images 產品圖片列表
     *
     * @return $this
     */
    public function setImages(?array $images): static
    {
        if (is_null($images)) {
            throw new InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus(): ?string
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status 產品狀態
     *
     * @return $this
     */
    public function setStatus(?string $status): static
    {
        if (is_null($status)) {
            throw new InvalidArgumentException('non-nullable status cannot be null');
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'status', must be one of '%s'",
                    $status,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets isShow
     *
     * @return string|null
     */
    public function getIsShow(): ?string
    {
        return $this->container['isShow'];
    }

    /**
     * Sets isShow
     *
     * @param string|null $isShow 是否顯示
     *
     * @return $this
     */
    public function setIsShow(?string $isShow): static
    {
        if (is_null($isShow)) {
            throw new InvalidArgumentException('non-nullable isShow cannot be null');
        }
        $allowedValues = $this->getIsShowAllowableValues();
        if (!in_array($isShow, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'isShow', must be one of '%s'",
                    $isShow,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['isShow'] = $isShow;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return string|null
     */
    public function getArchived(): ?string
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param string|null $archived 是否封存
     *
     * @return $this
     */
    public function setArchived(?string $archived): static
    {
        if (is_null($archived)) {
            throw new InvalidArgumentException('non-nullable archived cannot be null');
        }
        $allowedValues = $this->getArchivedAllowableValues();
        if (!in_array($archived, $allowedValues, true)) {
            throw new InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'archived', must be one of '%s'",
                    $archived,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime|null
     */
    public function getCreatedAt(): ?\DateTime
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime|null $createdAt 創建時間
     *
     * @return $this
     */
    public function setCreatedAt(?\DateTime $createdAt): static
    {
        if (is_null($createdAt)) {
            throw new InvalidArgumentException('non-nullable createdAt cannot be null');
        }
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets updatedAt
     *
     * @return \DateTime|null
     */
    public function getUpdatedAt(): ?\DateTime
    {
        return $this->container['updatedAt'];
    }

    /**
     * Sets updatedAt
     *
     * @param \DateTime|null $updatedAt 更新時間
     *
     * @return $this
     */
    public function setUpdatedAt(?\DateTime $updatedAt): static
    {
        if (is_null($updatedAt)) {
            throw new InvalidArgumentException('non-nullable updatedAt cannot be null');
        }
        $this->container['updatedAt'] = $updatedAt;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists(mixed $offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[ReturnTypeWillChange]
    public function offsetGet(mixed $offset): mixed
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet(mixed $offset, mixed $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset(mixed $offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[ReturnTypeWillChange]
    public function jsonSerialize(): mixed
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue(): string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


